{
    "introduction": "Supervised learning is the machine learning task of learning a function that maps an input to an output based on example input-output pairs. It infers a function from labeled training data consisting of a set of training examples.  In supervised learning, each example is a pair consisting of an input object (typically a vector) and a desired output value (also called the supervisory signal).  A supervised learning algorithm analyzes the training data and produces an inferred function, which can be used for mapping new examples. An optimal scenario will allow for the algorithm to correctly determine the class labels for unseen instances. This requires the learning algorithm to generalize from the training data to unseen situations in a `reasonable` way (see inductive bias). \u2022 The parallel task in human and animal psychology is often referred to as concept learning.",
    "Steps": " In order to solve a given problem of supervised learning, one has to perform the following steps:",
    "Algorithm choice": " A wide range of supervised learning algorithms are available, each with its strengths and weaknesses. There is no single learning algorithm that works best on all supervised learning problems (see the No free lunch theorem). There are four major issues to consider in supervised learning:",
    "Bias-variance tradeoff": " A first issue is the tradeoff between bias and variance. Imagine that we have available several different, but equally good, training data sets. A learning algorithm is biased for a particular input                         x                 {\\displaystyle x}    if, when trained on each of these data sets, it is systematically incorrect when predicting the correct output for                         x                 {\\displaystyle x}   . A learning algorithm has high variance for a particular input                         x                 {\\displaystyle x}    if it predicts different output values when trained on different training sets. The prediction error of a learned classifier is related to the sum of the bias and the variance of the learning algorithm. Generally, there is a tradeoff between bias and variance. A learning algorithm with low bias must be `flexible` so that it can fit the data well. But if the learning algorithm is too flexible, it will fit each training data set differently, and hence have high variance. A key aspect of many supervised learning methods is that they are able to adjust this tradeoff between bias and variance (either automatically or by providing a bias/variance parameter that the user can adjust).",
    "Function complexity and amount of training data": " The second issue is the amount of training data available relative to the complexity of the `true` function (classifier or regression function). If the true function is simple, then an `inflexible` learning algorithm with high bias and low variance will be able to learn it from a small amount of data. But if the true function is highly complex (e.g., because it involves complex interactions among many different input features and behaves differently in different parts of the input space), then the function will only be able to learn from a very large amount of training data and using a `flexible` learning algorithm with low bias and high variance.There is a clear demarcation between the input and the desired output.",
    "Dimensionality of the input space": " A third issue is the dimensionality of the input space. If the input feature vectors have very high dimension, the learning problem can be difficult even if the true function only depends on a small number of those features. This is because the many `extra` dimensions can confuse the learning algorithm and cause it to have high variance. Hence, high input dimensional typically requires tuning the classifier to have low variance and high bias. In practice, if the engineer can manually remove irrelevant features from the input data, this is likely to improve the accuracy of the learned function. In addition, there are many algorithms for feature selection that seek to identify the relevant features and discard the irrelevant ones. This is an instance of the more general strategy of dimensionality reduction, which seeks to map the input data into a lower-dimensional space prior to running the supervised learning algorithm.",
    "Noise in the output values": " A fourth issue is the degree of noise in the desired output values (the supervisory target variables). If the desired output values are often incorrect (because of human error or sensor errors), then the learning algorithm should not attempt to find a function that exactly matches the training examples. You can overfit even when there are no measurement errors (stochastic noise) if the function you are trying to learn is too complex for your learning model. In such a situation, the part of the target function that cannot be modeled `corrupts` your training data - this phenomenon has been called deterministic noise. When either type of noise is present, it is better to go with a higher bias, lower variance estimator. In practice, there are several approaches to alleviate noise in the output values such as early stopping to prevent overfitting as well as detecting and removing the noisy training examples prior to training the supervised learning algorithm. There are several algorithms that identify noisy training examples and removing the suspected noisy training examples prior to training has decreased generalization error with statistical significance.",
    "Other factors to consider": " Other factors to consider when choosing and applying a learning algorithm include the following:",
    "Algorithms": " The most widely used learning algorithms are:",
    "How supervised learning algorithms work": " Given a set of                         N                 {\\displaystyle N}    training examples of the form                         {         (                    x                        1                             ,                    y                        1                             )         ,         . ,         (                    x                        N                             ,                             y                        N                             )         }                 {\\displaystyle \\{(x_{1},y_{1}),...,(x_{N},\\;y_{N})\\}}    such that                                    x                        i                                     {\\displaystyle x_{i}}    is the feature vector of the i-th example and                                    y                        i                                     {\\displaystyle y_{i}}    is its label (i.e., class), a learning algorithm seeks a function                         g         :         X         \u2192         Y                 {\\displaystyle g:X\\to Y}   , where                         X                 {\\displaystyle X}    is the input space and",
    "Empirical risk minimization": " In empirical risk minimization, the supervised learning algorithm seeks the function                         g                 {\\displaystyle g}    that minimizes                         R         (         g         )                 {\\displaystyle R(g)}   . Hence, a supervised learning algorithm can be constructed by applying an optimization algorithm to find                         g                 {\\displaystyle g}   . When                         g                 {\\displaystyle g}    is a conditional probability distribution                         P         (         y                    |                  x         )                 {\\displaystyle P(y|x)}    and the loss function is the negative log likelihood:                         L         (         y         ,                                                y               ^                                          )         =         \u2212         log         \u2061         P         (         y                    |                  x         )                 {\\displaystyle L(y,{\\hat {y}})=-\\log P(y|x)}   , then empirical risk minimization is equivalent to maximum likelihood estimation. When                         G                 {\\displaystyle G}    contains many candidate functions or the training set is not sufficiently large, empirical risk minimization leads to high variance and poor generalization. The learning algorithm is able to memorize the training examples without generalizing well.",
    "Structural risk minimization": " Structural risk minimization seeks to prevent overfitting by incorporating a regularization penalty into the optimization. The regularization penalty can be viewed as implementing a form of Occam's razor that prefers simpler functions over more complex ones. A wide variety of penalties have been employed that correspond to different definitions of complexity. For example, consider the case where the function                         g                 {\\displaystyle g}    is a linear function of the form",
    "Generative training": " The training methods described above are discriminative training methods, because they seek to find a function                         g                 {\\displaystyle g}    that discriminates well between the different output values (see discriminative model). For the special case where                         f         (         x         ,         y         )         =         P         (         x         ,         y         )                 {\\displaystyle f(x,y)=P(x,y)}    is a joint probability distribution and the loss function is the negative log likelihood                         \u2212                    \u2211                        i                             log         \u2061         P         (                    x                        i                             ,                    y                        i                             )         ,                 {\\displaystyle -\\sum _{i}\\log P(x_{i},y_{i}),}    a risk minimization algorithm is said to perform generative training, because                         f                 {\\displaystyle f}    can be regarded as a generative model that explains how the data were generated. Generative training algorithms are often simpler and more computationally efficient than discriminative training algorithms. In some cases, the solution can be computed in closed form as in naive Bayes and linear discriminant analysis.",
    "Generalizations": " There are several ways in which the standard supervised learning problem can be generalized:",
    "Approaches and algorithms": " Analytical learning Artificial neural network Backpropagation Boosting (meta-algorithm) Bayesian statistics Case-based reasoning Decision tree learning Inductive logic programming Gaussian process regression Genetic Programming Group method of data handling Kernel estimators Learning Automata Learning Classifier Systems Minimum message length (decision trees, decision graphs, etc.) Multilinear subspace learning Naive Bayes classifier Maximum entropy classifier Conditional random field Nearest Neighbor Algorithm Probably approximately correct learning (PAC) learning Ripple down rules, a knowledge acquisition methodology Symbolic machine learning algorithms Subsymbolic machine learning algorithms Support vector machines Minimum Complexity Machines (MCM) Random Forests Ensembles of Classifiers Ordinal classification Data Pre-processing Handling imbalanced datasets Statistical relational learning Proaftn, a multicriteria classification algorithm",
    "Applications": " Bioinformatics Cheminformatics Quantitative structure\u2013activity relationship Database marketing Handwriting recognition Information retrieval Learning to rank Information extraction Object recognition in computer vision Optical character recognition Spam detection Pattern recognition Speech recognition Supervised learning is a special case of Downward causation in biological systems Landform classification using Satellite imagery",
    "General issues": " Computational learning theory Inductive bias Overfitting (machine learning) (Uncalibrated) Class membership probabilities Unsupervised learning Version spaces",
    "See also": " List of datasets for machine learning research",
    "References": " External links Machine Learning Open Source Software (MLOSS)"
}